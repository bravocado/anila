@import "vars";

@mixin button-base($display:$button-display) {
  display: $button-display;
  margin-bottom: 0; // For input.btn
  font-weight: $button-font-weight;
  text-align: center;
  vertical-align: middle;
  cursor: pointer;
  background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
  border: 1px solid transparent;
  white-space: nowrap;
  text-decoration: none !important;
  padding: $button-padding-vertical $button-padding-horizontal;
  &:focus {
    outline: none;
  }
}

@mixin anila-button ($btn-color: $primary-color, $style: flat, $gradient-type: overlay, $shape: no-radius) {
  // box-sizing
  @include box-sizing(border-box);

  //styling
  @if $style == flat {
    @include button-base($display:inline-block);
    $color-type: if(yiq-contrast-color($btn-color, #000, #fff) == #000, "light", "dark");
    $shadow-color: yiq-contrast-color($btn-color, #fff, #000);
    @include yiq-contrasted($btn-color);
    &:hover {
      $color-adjust: if($color-type == "dark", 10, -10);
      $hover-color: adjust-color($btn-color, $lightness: $color-adjust);
      background-color: $hover-color;
    }
    &:active {
      $color-adjust: if($color-type == "dark", 5, -5);
      $hover-color: adjust-color($btn-color, $lightness: $color-adjust);
      background-color: $hover-color;
    }
  }
  @if $style == pretty {
    @include button-base($display:inline-block);
    $color-type: if(yiq-contrast-color($btn-color, #000, #fff) == #000, "light", "dark");
    $shadow-color: yiq-contrast-color($btn-color, #fff, #000);
    $gradient-color:  photoshop-gradient-overlay($btn-color, $gradient-type, 50%, 90deg);
    @include background-image($gradient-color);
    @include yiq-contrasted($btn-color);
    border: 1px solid $btn-color;
    &:hover {
      $color-adjust: if($color-type == "dark", 5, -5);
      $hover-color: adjust-color($btn-color, $lightness: $color-adjust);
      background-color: $hover-color;
    }
    &:active {
      $color-adjust: if($color-type == "dark", 5, -5);
      $hover-color: adjust-color($btn-color, $lightness: $color-adjust);
      $gradient-color:  photoshop-gradient-overlay($btn-color, $gradient-type, 50%, -90deg);
      @include background-image($gradient-color);
      background-color: $hover-color;
    }
  }
  @if $style == shiny {
    @include button-base($display: inline-block);
    $color-type: if(yiq-contrast-color($btn-color, #000, #fff) == #000, "light", "dark");
    $shadow-color: yiq-contrast-color($btn-color, #fff, #000);
    $gradient-color:  photoshop-gradient-overlay($btn-color, normal, 100%, -90deg, 100%, (adjust-color($btn-color, $lightness: 10) 0%, adjust-color($btn-color, $lightness: 10) 50%, $btn-color 50%, $btn-color 100%));
    @include background-image($gradient-color);
    @include yiq-contrasted($btn-color);
    &:hover {
      $color-adjust: if($color-type == "dark", 10, -10);
      $hover-color: adjust-color($btn-color, $lightness: $color-adjust);
      $gradient-color:  photoshop-gradient-overlay($btn-color, normal, 100%, -90deg, 100%, (adjust-color($btn-color, $lightness: 4) 0%, adjust-color($btn-color, $lightness: 4) 50%, adjust-color($btn-color, $lightness: -4) 50%, adjust-color($btn-color, $lightness: -4) 100%));
      @include background-image($gradient-color);
    }
    &:active {
      // active styling
    }
  }

  // shape
  @if $shape == base-radius {
    @include vendor(border-radius, $button-radius-base);
  }
  @if $shape == small-radius {
    @include vendor(border-radius, $button-radius-small);
  }
  @if $shape == large-radius {
    @include vendor(border-radius, $button-radius-large);
  }
  @if $shape == round {
    @include vendor(border-radius, $button-round);
  }
}

@mixin button-size($padding:$button-md, $full-width:false, $is-input:false) {

  // We control which padding styles come through,
  // these can be turned off by setting $padding:false
  @if $padding {
    //padding-top: $padding;
    //padding-#{$opposite-direction}: $padding * 2;
    //padding-bottom: $padding + rem-calc(1);
    //padding-#{$default-float}: $padding * 2;
    @include unit(padding-top, $padding);
    @include unit(padding-#{$opposite-direction}, $padding * 2);
    @include unit(padding-bottom, $padding);
    @include unit(padding-#{$default-float}, $padding * 2);

    // We control the font-size based on mixin input.
    @if      $padding == $button-md { @include unit(font-size, $button-font-md); }
    @else if $padding == $button-tn { @include unit(font-size, $button-font-tn); }
    @else if $padding == $button-sm { @include unit(font-size, $button-font-sm); }
    @else if $padding == $button-lg { @include unit(font-size, $button-font-lg); }
/*     @else                            { font-size: $padding - rem-calc(2); } */
  }

  // We can set $full-width:true to remove side padding extend width.
  @if $full-width {
    // We still need to check if $padding is set.
    @if $padding {
    //padding-top: $padding;
    //padding-bottom: $padding + rem-calc(1);
    @include unit(padding-bottom, $padding);
    @include unit(padding-bottom, $padding + strip-unit(rem-calc(1)));
    } @else if $padding == false {
      padding-top:0;
      padding-bottom:0;
    }
    padding-right: 0;
    padding-left: 0;
    width: 100%;
  }

  // <input>'s and <button>'s take on strange padding. We added this to help fix that.
  @if $is-input == $button-lg {
    //padding-top: $is-input + rem-calc(.5);
    //padding-bottom: $is-input + rem-calc(.5);
    @include unit(padding-top, $is-input);
    @include unit(padding-bottom, $is-input);
    -webkit-appearance: none;
    border: none; 
    font-weight: $button-font-weight !important;
  }
  @else if $is-input {
    //padding-top: $is-input + rem-calc(1);
    //padding-bottom: $is-input;
    @include unit(padding-top, $is-input);
    @include unit(padding-bottom, $is-input);
    -webkit-appearance: none;
    border: none; 
    font-weight: $button-font-weight !important;
  }

}


// precomposed buttons
.btn {
  &.primary {
    @include anila-button($primary-color, flat);
  }
  &.secondary {
    @include anila-button($quinary-color, pretty, overlay, round);
  }
  &.tertiary {
    @include anila-button($secondary-color, shiny, overlay, base-radius);
  }
  &.lg {
    @include button-size($button-lg, false, false);
  }
  &.md {
    @include button-size($button-md, false, false);
  }
  &.sm {
    @include button-size($button-sm, false, false);
  }
  &.tn {
    @include button-size($button-tn, false, false);
  }
}
button.btn {
  &:focus {
    outline: none;
  }
}