@import "vars";

// for easier reading unminified css
/*
==========================================================================
  SPLIT BUTTONS
==========================================================================
*/

@mixin split-button-base {
	@include button-base($display: table);
	#{nth($split-button-holder, 1)} {
		display: table-cell;
	}
	#{nth($split-button-holder, 2)} {
		display: table-cell;
	}
}

@mixin split-button-size($padding: $button-md) {

  //@include unit(padding-#{$opposite-direction}, $padding);
  //@include unit(padding-#{$default-float}, $padding);

	#{nth($split-button-holder, 1)},
	#{nth($split-button-holder, 2)} {
	  @include unit(padding-top, $padding);
	  @include unit(padding-bottom, $padding);
	  @include unit(padding-#{$opposite-direction}, $padding);
	  @include unit(padding-#{$default-float}, $padding);
	}

  // We control the font-size based on mixin input.
  @if      $padding == $button-md { @include unit(font-size, $button-font-md); }
  @else if $padding == $button-tn { @include unit(font-size, $button-font-tn); }
  @else if $padding == $button-sm { @include unit(font-size, $button-font-sm); }
  @else if $padding == $button-lg { @include unit(font-size, $button-font-lg); }
}

@mixin split-button-shape($split-radius: $button-radius-base) {
	@include radius($split-radius);
	#{nth($split-button-holder, 1)} {
		@include side-radius($side: left, $radius: $split-radius);
	}
	#{nth($split-button-holder, 2)} {
		@include side-radius($side: right, $radius: $split-radius);
	}
}


@mixin split-care($color: $color-list, $theme: $theme-list, $gradient-type: overlay) {
  // base color adjust
  $color-type: if(yiq-contrast-color($color, #000, #fff) == #000, "light", "dark");
  $color-adjust: if($color-type == "light", 5, -5);
  $gradient-color: photoshop-gradient-overlay($color, $gradient-type, 50%, 90deg);
  
  //text shadow color adjust
  $text-shadow-adjust: if($color-type == "light", 20, -20);
  $text-shadow: adjust-color($color, $lightness: $text-shadow-adjust);

  // shadow color normal adjust
  $shadow-color: yiq-contrast-color($color, #fff, #000);

  // hover color adjust
  $hover-color: adjust-color($color, $lightness: $color-adjust);

  // active state adjust
  $active-color-adjust: if($color-type == "light", 10, -10);
  $active-color: adjust-color($color, $lightness: $active-color-adjust);

  // border color adjust
  $border-adjust: if($color-type == "light", 15, -15);
	$border-color: adjust-color($color, $lightness: $border-adjust);

	i {
		border-left: solid 1px $border-color;
		&:active {
			border-left: solid 1px adjust-color($border-color, $lightness: 10%);
		}
	}

  @if $theme == flat {
    // icon active 
    i {
    	&:active {
        @include yiq-contrasted(adjust-color($hover-color, $lightness: $active-color-adjust + 1%));
    	}
    }
	}

  @if $theme == pretty {
    // icon active 
    i {
    	&:active {
        @include yiq-contrasted(adjust-color($hover-color, $lightness: $active-color-adjust + 1%));
    	}
    }
  }

  @if $theme == shiny {
    // icon active 
    i {
    	&:active {
        @include yiq-contrasted(adjust-color($hover-color, $lightness: $active-color-adjust + 1%));
    	}
    }
  }

  @if $theme == bordered {
    // icon active 
    i {
      &:active {
        @include yiq-contrasted(adjust-color($hover-color, $lightness: $active-color-adjust + 1%));
      }
    }
  }

}


@mixin split-compose($color: $color-list, $theme: $theme-list) {
  @each $c in $color {
    &.#{nth($c, 1)} {
      @include yiq-contrasted(nth($c, 2));
      @include single-transition(background-color, 200ms, ease-in-out);
      // by default it's flat design
      @include split-care($color: nth($c, 2), $theme: flat);
      // creating style based on list
      &:hover {
        $hover-color: darken(nth($c, 2), 5%);
        background-color: $hover-color;
      }
      &:active {
        $active-color: darken(nth($c, 2), 10%);
        background-color: $active-color;
      }

      @each $t in $theme {
        &.#{nth($t, 1)} {
          // pretty design
          @if #{nth($t, 1)} == pretty {
            @include split-care($color: nth($c, 2), $theme: pretty, $gradient-type: overlay);
          }
          // shiny design
          @if #{nth($t, 1)} == shiny {
            @include split-care($color: nth($c, 2), $theme: shiny, $gradient-type: normal);
          }
           // bordered design
          @if #{nth($t, 1)} == bordered {
            @include split-care($color: nth($c, 2), $theme: bordered, $gradient-type: normal);
          }
        }
      }
    }
    // end creating style specified for split button
  }
  // end creating colors specified for split button

  // creating a colors and classes
  @include color-setup;
  
  // creating a theme
  @include compose-theme($hover: true, $transition: true, $button: true);
  
}


@if $use-split-button {
	// reset styling when using split-btn on button
	button.split-btn {
		border: 0;
		outline: none;
		padding: 0;
	}

	.split-btn {
		@include split-button-base;
		@include split-button-size($button-md);
		@include button-shape;

		// sizes
		&.lg {
			@include split-button-size($button-lg);
		}
		&.sm {
			@include split-button-size($button-sm);
		}
		&.tn {
			@include split-button-size($button-tn);
		}

		// shape
		&.soft {
			@include split-button-shape($button-radius-base);
		}
		&.extra-soft {
			@include split-button-shape($button-radius-large);
		}
		&.round {
			@include split-button-shape($button-round);
		}

		// style and color precompose
		@if $use-button-precomposed {
			@include split-compose;
		}
	}
}
