@import "vars";

/*
================================================
BOOTSTRAP GRID MIXIN
================================================
*/

// Centered container element
@mixin container-fixed() {
  margin-right: auto;
  margin-left: auto;
  padding-left:  ($grid-gutter-width / 2);
  padding-right: ($grid-gutter-width / 2);
  @include clearfix();
}

// Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
  margin-left:  ($gutter / -2);
  margin-right: ($gutter / -2);
  @include clearfix();
}

// Generate the extra small columns
@mixin make-xs-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  float: left;
  width: percentage(($columns / $grid-columns));
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
}

// Generate the small columns
@mixin make-sm-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  // Calculate width based on number of columns available
  @media (min-width: $screen-sm-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}

// Generate the small column offsets
@mixin make-sm-column-offset($columns) {
  @media (min-width: $screen-sm-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-push($columns) {
  @media (min-width: $screen-sm-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-pull($columns) {
  @media (min-width: $screen-sm-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Generate the medium columns
@mixin make-md-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  // Calculate width based on number of columns available
  @media (min-width: $screen-md-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}

// Generate the medium column offsets
@mixin make-md-column-offset($columns) {
  @media (min-width: $screen-md-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-push($columns) {
  @media (min-width: $screen-md) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-pull($columns) {
  @media (min-width: $screen-md-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Generate the large columns
@mixin make-lg-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  // Calculate width based on number of columns available
  @media (min-width: $screen-lg-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}

// Generate the large column offsets
@mixin make-lg-column-offset($columns) {
  @media (min-width: $screen-lg-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-push($columns) {
  @media (min-width: $screen-lg-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-pull($columns) {
  @media (min-width: $screen-lg-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

// [converter] Grid converted to use SASS cycles (LESS uses recursive nested mixin defs not supported by SASS)
@mixin make-grid-columns() {
  $list: '';
  $i: 1;
  $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
  @for $i from 2 through $grid-columns {
    $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}, #{$list}";
  }
  #{$list} {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left:  ($grid-gutter-width / 2);
    padding-right: ($grid-gutter-width / 2);
  }
}

// [converter] Grid converted to use SASS cycles (LESS uses recursive nested mixin defs not supported by SASS)
@mixin make-grid-columns-float($class) {
  $list: '';
  $i: 1;
  $list: ".col-#{$class}-#{$i}";
  @for $i from 2 through $grid-columns {
    $list: ".col-#{$class}-#{$i}, #{$list}";
  }
  #{$list} {
    float: left;
  }
}

@mixin calc-grid($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .col-#{$class}-#{$index} {
      width: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) {
    .col-#{$class}-push-#{$index} {
      left: percentage(($index / $grid-columns));
    }
  }
  @if ($type == pull) {
    .col-#{$class}-pull-#{$index} {
      right: percentage(($index / $grid-columns));
    }
  }
  @if ($type == offset) {
    .col-#{$class}-offset-#{$index} {
      margin-left: percentage(($index / $grid-columns));
    }
  }
}

// [converter] This is defined recursively in LESS, but SASS supports real loops
@mixin make-grid($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid($i, $class, $type);
  }
}

@if $use-bootstrap-grid == true {

	/* ========== CLASSES ============= */


	// Set the container width, and override it for fixed navbars in media queries
	.container {
	  @include container-fixed();

	  @media (min-width: $screen-sm) {
	    width: $container-sm;
	  }
	  @media (min-width: $screen-md) {
	    width: $container-md;
	  }
	  @media (min-width: $screen-lg-min) {
	    width: $container-lg;
	  }
	}

	// mobile first defaults
	.row {
	  @include make-row();
	}

	// Common styles for small and large grid columns
	@include make-grid-columns();

	@if $grid-bootstrap-xs == true {
		// Extra small grid
		//
		// Columns, offsets, pushes, and pulls for extra small devices like
		// smartphones.

		@include make-grid-columns-float(xs);
		@include make-grid($grid-columns, xs, width);
		@if $grid-bootstrap-xs-pull == true {
			@include make-grid($grid-columns, xs, pull);
		}
		@if $grid-bootstrap-xs-push == true {
			@include make-grid($grid-columns, xs, push);
		}
		@if $grid-bootstrap-xs-offset == true {
			@include make-grid($grid-columns, xs, offset);
		}
	}


	@if $grid-bootstrap-sm == true {
		// Small grid
		//
		// Columns, offsets, pushes, and pulls for the small device range, from phones
		// to tablets.

		@media (min-width: $screen-sm-min) {
		  @include make-grid-columns-float(sm);
		  @include make-grid($grid-columns, sm, width);
			@if $grid-bootstrap-sm-pull == true {
			  @include make-grid($grid-columns, sm, pull);
		  }
		  @if $grid-bootstrap-sm-push == true {
		  	@include make-grid($grid-columns, sm, push);
		  }
		  @if $grid-bootstrap-sm-offset == true {
		  	@include make-grid($grid-columns, sm, offset);
			}
		}
	}

	@if $grid-bootstrap-md == true {
		// Medium grid
		//
		// Columns, offsets, pushes, and pulls for the desktop device range.

		@media (min-width: $screen-md-min) {
		  @include make-grid-columns-float(md);
		  @include make-grid($grid-columns, md, width);
			@if $grid-bootstrap-md-pull == true {
			  @include make-grid($grid-columns, md, pull);
		  }
			@if $grid-bootstrap-md-push == true {
			  @include make-grid($grid-columns, md, push);
			}
			@if $grid-bootstrap-md-offset == true {
			  @include make-grid($grid-columns, md, offset);
			}
		}
	}

	@if $grid-bootstrap-lg == true {
		// Large grid
		//
		// Columns, offsets, pushes, and pulls for the large desktop device range.

		@media (min-width: $screen-lg-min) {
		  @include make-grid-columns-float(lg);
		  @include make-grid($grid-columns, lg, width);
			@if $grid-bootstrap-lg-pull == true {
			  @include make-grid($grid-columns, lg, pull);
			}
			@if $grid-bootstrap-lg-push == true {
			  @include make-grid($grid-columns, lg, push);
			}
			@if $grid-bootstrap-lg-offset == true {
			  @include make-grid($grid-columns, lg, offset);
			}
		}
	}

} // if use bootstrap end


/*
================================================
FOUNDATION GRID MIXIN
================================================
*/





/*
================================================
INUIT GRID MIXIN
================================================
*/




/*
================================================
CUSTOM GRID MIXIN
================================================
*/


