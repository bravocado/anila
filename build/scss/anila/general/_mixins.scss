/*------------------------------------*\
    GENERAL MIXIN
\*------------------------------------*/

// Create vendor-prefixed CSS in one go, e.g.
// `@include vendor(border-radius, 4px);`

@mixin vendor($property, $value...){
    -webkit-#{$property}:$value;
       -moz-#{$property}:$value;
         -o-#{$property}:$value;
            #{$property}:$value;
}

@if $global-border-box == true{
    /**
    * Letâ€™s make the box model all nice, shall we...?
    */
    *{
        &,
        &:before,
        &:after{
            @include vendor(box-sizing, border-box);
        }
    }
}

// We use this to add box-sizing across browser prefixes
@mixin box-sizing($type:border-box) {
  @include vendor(box-sizing, $type);
}

@mixin radius($radius:$border-radius-base) {
  @if $radius {
    @include vendor(border-radius, $radius);
  }
}

@mixin side-radius($side, $radius:$border-radius-base) {
  @if $side == left {
    @include vendor(border-radius-bottomleft, $radius);
    @include vendor (border-radius-topleft, $radius);
    @include vendor(border-bottom-left-radius, $radius);
    @include vendor(border-top-left-radius, $radius);
  }
  @else if $side == right {
    @include vendor(border-radius-bottomright, $radius);
    @include vendor (border-radius-topright, $radius);
    @include vendor(border-bottom-right-radius, $radius);
    @include vendor(border-top-right-radius, $radius);
  }
  @else if $side == top {
    @include vendor(border-radius-topright, $radius);
    @include vendor (border-radius-topleft, $radius);
    @include vendor(border-top-right-radius, $radius);
    @include vendor(border-top-left-radius, $radius);
  }
  @else if $side == bottom {
    @include vendor(border-radius-bottomright, $radius);
    @include vendor (border-radius-bottomleft, $radius);
    @include vendor(border-bottom-right-radius, $radius);
    @include vendor(border-bottom-left-radius, $radius);
  }
}


// We use this to create equilateral triangles
// $triangle-size - Used to set border-size. No default, set a px or em size.
// $triangle-color - Used to set border-color which makes up triangle. No default
// $triangle-direction - Used to determine which direction triangle points. Options: top, bottom, left, right
@mixin css-triangle($triangle-size, $triangle-color, $triangle-direction) {
  content: "";
  display: block;
  width: 0;
  height: 0;
  border: inset $triangle-size;
  @if ($triangle-direction == top) {
    border-color: $triangle-color transparent transparent transparent;
    border-top-style: solid;
  }
  @if ($triangle-direction == bottom) {
    border-color: transparent transparent $triangle-color transparent;
    border-bottom-style: solid;
  }
  @if ($triangle-direction == left) {
    border-color: transparent transparent transparent $triangle-color;
    border-left-style: solid;
  }
  @if ($triangle-direction == right) {
    border-color: transparent $triangle-color transparent transparent;
    border-right-style: solid;
  }
}

// We use this to add a glowing effect to block elements
// $selector - Used for selector state. Default: focus, Options: hover, active, visited
// $fade-time - Default: 300ms
// $glowing-effect-color - Default: fade-out($primary-color, .25)
@mixin block-glowing-effect($selector:focus, $fade-time:300ms, $glowing-effect-color:fade-out($primary-color, .25)) {
  -webkit-transition: -webkit-box-shadow $fade-time, border-color $fade-time ease-in-out;
  -moz-transition: -moz-box-shadow $fade-time, border-color $fade-time ease-in-out;
  transition: box-shadow $fade-time, border-color $fade-time ease-in-out;

  &:#{$selector} {
    -webkit-box-shadow: 0 0 5px $glowing-effect-color;
    -moz-box-shadow: 0 0 5px $glowing-effect-color;
    box-shadow: 0 0 5px $glowing-effect-color;
    border-color: $glowing-effect-color;
  }
}

// We use this to add transitions to elements
// $property - Default: all, Options: http://www.w3.org/TR/css3-transitions/#animatable-properties
// $speed - Default: 300ms
// $ease - Default:ease-out, Options: http://css-tricks.com/almanac/properties/t/transition-timing-function/
@mixin single-transition($property:all, $speed:300ms, $ease:ease-out) {
  @include vendor(transition, $property $speed $ease);
}



// Clearfix
// --------
// For clearing floats like a boss h5bp.com/q
@mixin clearfix {
  *zoom: 1;
  &:before,
  &:after {
    display: table;
    content: "";
    // Fixes Opera/contenteditable bug:
    // http://nicolasgallagher.com/micro-clearfix-hack/#comment-36952
    line-height: 0;
  }
  &:after {
    clear: both;
  }
}

/**
 * Create CSS keyframe animations for all vendors in one go, e.g.:
 *
   .foo{
       @include vendor(animation, shrink 3s);
   }

   @include keyframe(shrink){
       from{
           font-size:5em;
       }
   }
 *
 * Courtesy of @integralist: twitter.com/integralist/status/260484115315437569
@mixin keyframe ($animation-name){
    @-webkit-keyframes $animation-name{
        @content;
    }

    @-moz-keyframes $animation-name{
        @content;
    }

    @-ms-keyframes $animation-name{
        @content;
    }

    @-o-keyframes $animation-name{
        @content;
    }

    @keyframes $animation-name{
        @content;
    }
}
*/

// Transitions
@mixin transition($transition...) {
  -webkit-transition: $transition;
     -moz-transition: $transition;
       -o-transition: $transition;
          transition: $transition;
}
@mixin transition-delay($transition-delay) {
  -webkit-transition-delay: $transition-delay;
     -moz-transition-delay: $transition-delay;
       -o-transition-delay: $transition-delay;
          transition-delay: $transition-delay;
}
@mixin transition-duration($transition-duration) {
  -webkit-transition-duration: $transition-duration;
     -moz-transition-duration: $transition-duration;
       -o-transition-duration: $transition-duration;
          transition-duration: $transition-duration;
}

// Force overly long spans of text to truncate, e.g.:
// `@include truncate(100%);`
// Where `$truncation-boundary` is a united measurement.
@mixin truncate($truncation-boundary){
    max-width:$truncation-boundary;
    white-space:nowrap;
    overflow:hidden;
    text-overflow:ellipsis;
}

// inline-block hack without commenting your HTML
@mixin inline-block {
  display: inline-block;
  margin-right: -4px;
}

// IE7 inline-block
// ----------------
@mixin ie7-inline-block() {
  *display: inline; /* IE7 inline-block hack */
  *zoom: 1;
}


// IE7 likes to collapse whitespace on either side of the inline-block elements.
// Ems because we're attempting to match the width of a space character. Left
// version is for form buttons, which typically come after other elements, and
// right version is for icons, which come before. Applying both is ok, but it will
// mean that space between those elements will be .6em (~2 space characters) in IE7,
// instead of the 1 space in other browsers.

@mixin ie7-restore-left-whitespace() {
  *margin-left: .3em;

  &:first-child {
    *margin-left: 0;
  }
}

@mixin ie7-restore-right-whitespace() {
  *margin-right: .3em;
}
