// ------------------------------------
// GENERAL MIXIN
// ------------------------------------

// Create vendor-prefixed CSS in one go, e.g.
// `@include vendor(border-radius, 4px);`


@mixin vendor($property, $value...){
    -webkit-#{$property}:$value;
       -moz-#{$property}:$value;
         -o-#{$property}:$value;
            #{$property}:$value;
}

@if $global-border-box == true{
    /* ---------
    BOX SIZING!
    ------------ */
    *{
        &,
        &:before,
        &:after{
            @include vendor(box-sizing, border-box);
        }
    }
}

// User select
// For selecting text on the page
@mixin user-select($select) {
  -webkit-user-select: $select;
     -moz-user-select: $select;
      -ms-user-select: $select; // IE10+
       -o-user-select: $select;
          user-select: $select;
}

// we use this to add a fallback for non supported rem
@mixin unit($property, $values...) {
  $max: length($values);
  $pxValues: ();
  $remValues: ();

  @for $i from 1 through $max {
    $pxValues: px-calc(nth($values, $i));
    @if $i == $max {
      $pxValues: #{$pxValues + " "};
    }
  }

  @for $i from 1 through $max {
    $remValues: rem-calc(nth($values, $i));
    @if $i == $max {
      $remValues: #{$remValues + " "};
    }
  } 

  @if $rem-fallback == true {
    #{$property}: $pxValues; 
  }
  #{$property}: $remValues; 

}


// mixin background image from bourbon.io
@mixin background-image($images...) {
  background-image: _add-prefix($images, webkit);
  //background-image: _add-prefix($images);
}

// We use this to add box-sizing across browser prefixes
@mixin box-sizing($type:border-box) {
  @include vendor(box-sizing, $type);
}

@mixin radius($radius:$border-radius-base) {
  @if $radius {
    @include vendor(border-radius, $radius);
  }
}

@mixin side-radius($side, $radius:$border-radius-base) {
  @if $side == left {
    @include vendor(border-radius-bottomleft, $radius);
    @include vendor (border-radius-topleft, $radius);
    @include vendor(border-bottom-left-radius, $radius);
    @include vendor(border-top-left-radius, $radius);
  }
  @else if $side == right {
    @include vendor(border-radius-bottomright, $radius);
    @include vendor (border-radius-topright, $radius);
    @include vendor(border-bottom-right-radius, $radius);
    @include vendor(border-top-right-radius, $radius);
  }
  @else if $side == top {
    @include vendor(border-radius-topright, $radius);
    @include vendor (border-radius-topleft, $radius);
    @include vendor(border-top-right-radius, $radius);
    @include vendor(border-top-left-radius, $radius);
  }
  @else if $side == bottom {
    @include vendor(border-radius-bottomright, $radius);
    @include vendor (border-radius-bottomleft, $radius);
    @include vendor(border-bottom-right-radius, $radius);
    @include vendor(border-bottom-left-radius, $radius);
  }
}


// We use this to create equilateral triangles
// $triangle-size - Used to set border-size. No default, set a px or em size.
// $triangle-color - Used to set border-color which makes up triangle. No default
// $triangle-direction - Used to determine which direction triangle points. Options: top, bottom, left, right
@mixin css-triangle($triangle-size, $triangle-color, $triangle-direction) {
  content: "";
  display: block;
  width: 0;
  height: 0;
  border: inset $triangle-size;
  @if ($triangle-direction == top) {
    border-color: $triangle-color transparent transparent transparent;
    border-top-style: solid;
  }
  @if ($triangle-direction == bottom) {
    border-color: transparent transparent $triangle-color transparent;
    border-bottom-style: solid;
  }
  @if ($triangle-direction == left) {
    border-color: transparent transparent transparent $triangle-color;
    border-left-style: solid;
  }
  @if ($triangle-direction == right) {
    border-color: transparent $triangle-color transparent transparent;
    border-right-style: solid;
  }
}

// We use this to add a glowing effect to block elements
// $selector - Used for selector state. Default: focus, Options: hover, active, visited
// $fade-time - Default: 300ms
// $glowing-effect-color - Default: fade-out($primary-color, .25)
@mixin block-glowing-effect($selector:focus, $fade-time:300ms, $glowing-effect-color:fade-out($primary-color, .25)) {
  -webkit-transition: -webkit-box-shadow $fade-time, border-color $fade-time ease-in-out;
  -moz-transition: -moz-box-shadow $fade-time, border-color $fade-time ease-in-out;
  transition: box-shadow $fade-time, border-color $fade-time ease-in-out;

  &:#{$selector} {
    -webkit-box-shadow: 0 0 5px $glowing-effect-color;
    -moz-box-shadow: 0 0 5px $glowing-effect-color;
    box-shadow: 0 0 5px $glowing-effect-color;
    border-color: $glowing-effect-color;
  }
}

// Drop shadows
@mixin box-shadow($shadow...) {
  -webkit-box-shadow: $shadow; // iOS <4.3 & Android <4.1
          box-shadow: $shadow;
}


// We use this to add transitions to elements
// $property - Default: all, Options: http://www.w3.org/TR/css3-transitions/#animatable-properties
// $speed - Default: 300ms
// $ease - Default:ease-out, Options: http://css-tricks.com/almanac/properties/t/transition-timing-function/
@mixin single-transition($property:all, $speed:300ms, $ease:ease-out) {
  @include vendor(transition, $property $speed $ease);
}



// Clearfix
// --------
// For clearing floats like a boss h5bp.com/q
@mixin clearfix {
  *zoom: 1;
  &:before,
  &:after {
    display: table;
    content: "";
    // Fixes Opera/contenteditable bug:
    // http://nicolasgallagher.com/micro-clearfix-hack/#comment-36952
    line-height: 0;
  }
  &:after {
    clear: both;
  }
}

/**
 * Create CSS keyframe animations for all vendors in one go, e.g.:
 *
   .foo{
       @include vendor(animation, shrink 3s);
   }

   @include keyframe(shrink){
       from{
           font-size:5em;
       }
   }
 *
 * Courtesy of @integralist: twitter.com/integralist/status/260484115315437569
*/
@mixin keyframe ($animation-name){
    @-webkit-keyframes #{$animation-name}{
        @content;
    }

    @-moz-keyframes #{$animation-name}{
        @content;
    }

    @-ms-keyframes #{$animation-name}{
        @content;
    }

    @-o-keyframes #{$animation-name}{
        @content;
    }

    @keyframes #{$animation-name}{
        @content;
    }
}

// Transitions
@mixin transition($transition...) {
  -webkit-transition: $transition;
     -moz-transition: $transition;
       -o-transition: $transition;
          transition: $transition;
}
@mixin transition-delay($transition-delay) {
  -webkit-transition-delay: $transition-delay;
     -moz-transition-delay: $transition-delay;
       -o-transition-delay: $transition-delay;
          transition-delay: $transition-delay;
}
@mixin transition-duration($transition-duration) {
  -webkit-transition-duration: $transition-duration;
     -moz-transition-duration: $transition-duration;
       -o-transition-duration: $transition-duration;
          transition-duration: $transition-duration;
}

// Force overly long spans of text to truncate, e.g.:
// `@include truncate(100%);`
// Where `$truncation-boundary` is a united measurement.
@mixin truncate($truncation-boundary){
    max-width:$truncation-boundary;
    white-space:nowrap;
    overflow:hidden;
    text-overflow:ellipsis;
}


@mixin color-setup($color: $color-list) {
  @each $c in $color {
    &.#{nth($c, 1)} {
      @include yiq-contrasted(nth($c, 2));
    }
  }
}

@mixin theme-setup($color: $primary-color, $theme: flat, $gradient-type: overlay, $hover: false, $transition: false, $button: false) {
  //base color
  $color-type: if(yiq-contrast-color($color, #000, #fff) == #000, "light", "dark");
  $color-adjust: if($color-type == "light", 5, -5);
  $gradient-color: photoshop-gradient-overlay($color, $gradient-type, 50%, 90deg);
  //text shadow color adjust
  $text-shadow-adjust: if($color-type == "light", 20, -20);
  $text-shadow: adjust-color($color, $lightness: $text-shadow-adjust);
  // shadow color normal adjust
  $shadow-color: yiq-contrast-color($color, #fff, #000);
  // hover color adjust
  $hover-color: adjust-color($color, $lightness: $color-adjust);
  // active state adjust
  $active-color-adjust: if($color-type == "light", 10, -10);
  $active-color: adjust-color($color, $lightness: $active-color-adjust);

  @if $theme == flat {
    @if $hover {
      &:hover, &:focus {
        background-color: $hover-color;
      }
      &:active {
        background-color: $active-color;
      }
      @if $transition {
        @include single-transition(background-color, 400ms, ease-in-out);
      }
    }
  }
  @else if $theme == pretty {
    @include background-image($gradient-color);
    border: 1px solid $color;
    @if $hover {
      &:hover, &:focus {
        background-color: $hover-color;
      }
      &:active {
        @include vendor(box-shadow, inset 0 2px 6px rgba(0, 0, 0, .3));
        background-color: $active-color;
      }
      @if $transition {
        @include single-transition(background-color, 400ms, ease-in-out);
      }
    }
    @if $button {
      @include vendor(box-shadow, inset 0 0 5px rgba($shadow-color, .5));
      @include vendor(text-shadow, -1px 1px 1px rgba($text-shadow, .8));
    }
  }
  @else if $theme == shiny {
    // readjust gradient
    $gradient-color:  photoshop-gradient-overlay($color, normal, 100%, -90deg, 100%, (adjust-color($color, $lightness: 10) 0%, adjust-color($color, $lightness: 10) 50%, $color 50%, $color 100%));
    @include background-image($gradient-color);
    @if $hover {
      &:hover, &:focus {
        $color-adjust: if($color-type == "dark", 2, -2);
        $hover-color: adjust-color($color, $lightness: $color-adjust);
        $gradient-color: photoshop-gradient-overlay($hover-color, normal, 100%, -90deg, 100%, (adjust-color($hover-color, $lightness: 10) 0%, adjust-color($hover-color, $lightness: 10) 50%, $hover-color 50%, $hover-color 100%));
        @include background-image($gradient-color);
        background-color: $hover-color;
      }
      &:active {
        $color-adjust: if($color-type == "dark", 5, -5);
        $hover-color: adjust-color($color, $lightness: $color-adjust);
        $gradient-color: photoshop-gradient-overlay($hover-color, normal, 100%, -90deg, 100%, (adjust-color($hover-color, $lightness: 10) 0%, adjust-color($hover-color, $lightness: 10) 50%, $hover-color 50%, $hover-color 100%));
        @include background-image($gradient-color);
        background-color: $hover-color;
      }
      @if $transition {
        @include single-transition(background-color, 400ms, ease-in-out);
      }
    }
    @if $button == true {
      @include vendor(box-shadow, inset 0 3px 5px rgba(255, 255, 255, .5));
      @include vendor(text-shadow, 2px 0 2px rgba($text-shadow, .9));
    }
  }
  @else if $theme == bordered {
    @include yiq-contrasted(rgba(255, 255, 255, 0));
    border: 3px solid $color;
    @if $hover {
      &:hover, &:focus {
        border: 3px solid $hover-color;
      }
      &:active {
        border: 3px solid $active-color;
      }
      @if $transition {
        @include single-transition(border-color, 400ms, ease-in-out);
      }
    }
  }
}

@mixin compose-theme($color: $color-list, $theme: $theme-list, $gradient-type: overlay, $hover: false, $transition: false, $button: false) {
  @each $c in $color {
    &.#{nth($c, 1)} {
      @if $hover {
        @include theme-setup($color: nth($c, 2), $hover: true);
      }
      @else if $transition {
        @include theme-setup($color: nth($c, 2), $hover: true, $transition: true);
      }
      @else if $button {
        @include theme-setup($color: nth($c, 2), $hover: true, $transition: true, $button: true);
      }
      @else {
        @include theme-setup($color: nth($c, 2));
      }
      @each $t in $theme {
        &.#{nth($t, 1)} {
          // pretty design
          @if #{nth($t, 1)} == pretty {
            @include theme-setup($color: nth($c, 2), $theme: pretty, $gradient-type: overlay);
            @if $hover {
              @include theme-setup($color: nth($c, 2), $hover: true);
            }
            @else if $transition {
              @include theme-setup($color: nth($c, 2), $hover: true, $transition: true);
            }
            @else if $button {
              @include theme-setup($color: nth($c, 2), $hover: true, $transition: true, $button: true);
            }
          }
          // shiny design
          @else if #{nth($t, 1)} == shiny {
            @if $hover {
              @include theme-setup($color: nth($c, 2), $theme: shiny, $gradient-type: normal, $hover: true);
            }
            @else if $transition {
              @include theme-setup($color: nth($c, 2), $theme: shiny, $gradient-type: normal, $hover: true, $transition: true);
            }
            @else if $button  {
              @include theme-setup($color: nth($c, 2), $theme: shiny, $gradient-type: normal, $hover: true, $transition: true, $button: true);
            }
            @else {
              @include theme-setup($color: nth($c, 2), $theme: shiny, $gradient-type: normal);
            }
          }
          // bordered design
          @else if #{nth($t, 1)} == bordered {
            @if $hover {
              @include theme-setup($color: nth($c, 2), $theme: bordered, $hover: true);
            }
            @else if $transition {
              @include theme-setup($color: nth($c, 2), $theme: bordered, $hover: true, $transition: true);
            }
            @else if $button {
              @include theme-setup($color: nth($c, 2), $theme: bordered, $hover: true, $transition: true, $button: true);
            }
            @else {
              @include theme-setup($color: nth($c, 2), $theme: bordered);
            }
          }
        }
      }
    }
  }
}

// inline-block hack without commenting your HTML
@mixin inline-block {
  display: inline-block;
  margin-right: -4px;
}

// IE7 inline-block
// ----------------
@mixin ie7-inline-block() {
  *display: inline; /* IE7 inline-block hack */
  *zoom: 1;
}


// IE7 likes to collapse whitespace on either side of the inline-block elements.
// Ems because we're attempting to match the width of a space character. Left
// version is for form buttons, which typically come after other elements, and
// right version is for icons, which come before. Applying both is ok, but it will
// mean that space between those elements will be .6em (~2 space characters) in IE7,
// instead of the 1 space in other browsers.

@mixin ie7-restore-left-whitespace() {
  *margin-left: .3em;

  &:first-child {
    *margin-left: 0;
  }
}

@mixin ie7-restore-right-whitespace() {
  *margin-right: .3em;
}
