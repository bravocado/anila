/*
==========================================================================
 BUTTONS GROUP
==========================================================================
*/

// We use this to add styles for a button group container
@mixin button-group-container($styles:true, $float:false) {
  @if $styles {
    list-style: none;
    margin: 0;
    @include clearfix();
  }
  @if $float {
    float: #{$default-float};
    @include unit(margin-#{$opposite-direction}, $button-bar-margin-opposite);
    & div { overflow: hidden; }
  }
}

// We use this to control styles for button groups
@mixin button-group-style($radius:false, $even:false, $float:$default-float) {

  > button, .btn { 
    border-#{$opposite-direction}: $button-group-border-width solid;
    border-#{$opposite-direction}-color: rgba(0, 0, 0, .1);  
  }

  // We use this to control the flow, or remove those styles completely.
  @if $float {
    margin: 0;
    @include unit(margin-bottom, 2px);
    float: $float;
    // Make sure the first child doesn't get the negative margin.
    &:first-child { margin-#{$default-float}: 0; }
  }

  // We use these to control left and right radius on first/last buttons in the group.
  @if $radius == true {
    &:first-child,
    &:first-child > a,
    &:first-child > button,
    &:first-child > .#{$base-button-class} { @include radius($default-float, $button-radius-base); }
    &:last-child,
    &:last-child > a,
    &:last-child > button,
    &:last-child > .#{$base-button-class} { @include radius($opposite-direction, $button-radius-base); }
  }
  @else if $radius {
    &:first-child,
    &:first-child > a,
    &:first-child > button,
    &:first-child > .#{$base-button-class} { @include radius($default-float, $radius); }
    &:last-child,
    &:last-child > a,
    &:last-child > button,
    &:last-child > .#{$base-button-class} { @include radius($opposite-direction, $radius); }
  }

  // We use this to make the buttons even width across their container
  @if $even {
    width: percentage((100/$even) / 100);
    button, .#{$base-button-class} { width: 100%; }
  }
  
  // reset border-color for candy button
  & > .#{$base-button-class} {
    &.candy {
      border-right: 0;
      border-right-width: 0;
      border-color: none;
    }
  }

}

@if $use-button-group == true {
  .#{$base-button-class}-group { @include button-group-container;
    
    &> * {
      @include button-group-style();
    }

    &.soft > * { @include button-group-style($radius:$button-radius-base, $float:null); }
    &.extra-soft > * { @include button-group-style($radius:$button-radius-large, $float:null); }
    &.round > * { @include button-group-style($radius:$button-round, $float:null); }
    
    &.tn > * > .#{$base-button-class} {
      @include button-size($button-tn, false, false);
    }
    &.sm > * > .#{$base-button-class} {
      @include button-size($button-sm, false, false);
    }
    &.lg > * > .#{$base-button-class} {
      @include button-size($button-lg, false, false);
    }

    @for $i from 2 through 8 {
      &.even#{-$i} li { @include button-group-style($even:$i, $float:null); }
    }
  }

  .#{$base-button-class}-bar {
    @include clearfix;
    .#{$base-button-class}-group { @include button-group-container($styles:false,$float:true); }
  }
}
